/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.clinicalontology.common.string;

public class StringUtils {

    /**
     * Determines length of a string
     *
     * @param cs A string
     * @return Returns the length of the string or 0 if string is null
     */
    public static int length(CharSequence cs) {
        return cs == null ? 0 : cs.length();
    }

    /**
     * Determines if a string is empty or composed purely of whitespace
     *
     * @param cs A string
     * @return Returns true if string is null, has length 0, or is composed entirely of whitespace
     */
    public static boolean isBlank(CharSequence cs) {
        int strLen = length(cs);
        if (strLen == 0) {
            return true;
        } else {
            for (int i = 0; i < strLen; ++i) {
                if (!Character.isWhitespace(cs.charAt(i))) {
                    return false;
                }
            }

            return true;
        }
    }

    public static boolean isNotBlank(CharSequence cs) {
        return !isBlank(cs);
    }

    /**
     * Determines if a string has 0 length or is null
     *
     * @param cs A string
     * @return Returns true if string is null or has length 0
     */
    public static boolean isEmpty(CharSequence cs) {
        return length(cs) == 0;
    }

    public static boolean isNotEmpty(CharSequence cs) {
        return !isEmpty(cs);
    }

    /**
     * <p>Capitalizes a String changing the first character to title case. No other characters are changed.</p>
     *
     * <pre>
     * StringUtils.capitalize(null)  = null
     * StringUtils.capitalize("")    = ""
     * StringUtils.capitalize("cat") = "Cat"
     * StringUtils.capitalize("cAt") = "CAt"
     * StringUtils.capitalize("'cat'") = "'cat'"
     * </pre>
     *
     * @param str the String to capitalize, may be null
     * @return the capitalized String, {@code null} if null String input
     */
    public static String capitalize(final String str) {
        final int strLen = length(str);
        if (strLen == 0) {
            return str;
        }

        final int firstCodepoint = str.codePointAt(0);
        final int newCodePoint = Character.toTitleCase(firstCodepoint);
        if (firstCodepoint == newCodePoint) {
            // already capitalized
            return str;
        }

        final int[] newCodePoints = new int[strLen]; // cannot be longer than the char array
        int outOffset = 0;
        newCodePoints[outOffset++] = newCodePoint; // copy the first codepoint
        for (int inOffset = Character.charCount(firstCodepoint); inOffset < strLen; ) {
            final int codepoint = str.codePointAt(inOffset);
            newCodePoints[outOffset++] = codepoint; // copy the remaining ones
            inOffset += Character.charCount(codepoint);
        }
        return new String(newCodePoints, 0, outOffset);
    }

    public static String makeIdentifierJavaSafe(String identifier) {
        String javaSafeIdentifier = identifier;
        if(!isBlank(identifier)) {
            javaSafeIdentifier = identifier.replaceAll("-", "_");
            //Add more rules here
        }
        return javaSafeIdentifier;
    }
}
